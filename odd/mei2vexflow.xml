<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>

<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>MEI to VexFlow - accepted MEI format</title>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      
      <schemaSpec ident="MEI2VF" ns="http://www.music-encoding.org/ns/mei" start="mei music body mdiv">
        
        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared" exclude="macro.XSLT
                                             annot barline clef clefGrp custos dot dynam ending expansion fw group
                                             grpSym keyAccid keySig layerDef pad part parts pb pgDesc
                                             pgFoot pgFoot2 pgHead pgHead2 phrase rend space titlePlage"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.cmn" exclude="arpeg beamSpan beatRpt bend breath bTrem fTrem gliss halfmRpt 
                                          harpPedal meterSig meterSigGrp mRpt mRpt2 mSpace multiRest multiRpt 
                                          octave ossia pedal reh tuplet tupletSpan"/>
        <!--<moduleRef key="MEI.mensural"/> -->
        <!--<moduleRef key="MEI.neumes"/>-->
        <!--<moduleRef key="MEI.analysis"/>-->
        <!--<moduleRef key="MEI.cmnOrnaments"/>-->
        <!--<moduleRef key="MEI.corpus"/>-->
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.edittrans" exclude="abbr add corr damage del expan gap handShift orig reg restore sic subst supplied unclear"/>
        <!--<moduleRef key="MEI.facsimile"/>-->
        <!--<moduleRef key="MEI.figtable"/>-->
        <!--<moduleRef key="MEI.frbr"/>-->
        <!--<moduleRef key="MEI.harmony"/>-->
        <!--<moduleRef key="MEI.linkalign"/>-->
        <moduleRef key="MEI.lyrics" exclude="lyrics verse"/>
        <!--<moduleRef key="MEI.midi"/>-->
        <moduleRef key="MEI.namesdates"/>
        <!--<moduleRef key="MEI.performance"/>-->
        <moduleRef key="MEI.ptrref"/>
        <!--<moduleRef key="MEI.tablature"/>-->
        <!--<moduleRef key="MEI.text"/>-->
        <!--<moduleRef key="MEI.usersymbols"/>-->

        <!-- Disable mensural- and neume-specific model classes in the shared module -->
        <classSpec ident="model.scorePart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.sectionPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.staffPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        <classSpec ident="model.layerPart.mensuralAndNeumes" module="MEI.shared" type="model"
          mode="delete"/>
        
        <!-- @dur of note, rest must be defined! -->
        <classSpec ident="att.duration.musical.req" module="MEI.shared" type="atts" mode="add">
          <desc>Required attributes that express duration in musical terms.</desc>
          <attList>
            <attDef ident="dur" usage="req">
              <desc>records the duration of a feature using the relative durational values provided by
                the data.DURATION datatype.</desc>
              <datatype>
                <rng:ref name="data.DURATION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <!--<classSpec ident="att.note.log" module="MEI.shared" type="atts" mode="change">
          <classes mode="replace">
            <memberOf key="att.event"/>
            <memberOf key="att.accidental"/>
            <memberOf key="att.articulation"/>
            <memberOf key="att.augmentdots"/>
            <memberOf key="att.duration.musical.req"/>
            <memberOf key="att.fermatapresent"/>
            <memberOf key="att.pitched"/>
            <memberOf key="att.syltext"/>
            <memberOf key="att.slurpresent"/>
            <memberOf key="att.tiepresent"/>
            <memberOf key="att.tupletpresent"/>
            <memberOf key="att.note.log.cmn"/>
            <memberOf key="att.note.log.mensural"/>
          </classes>
        </classSpec>-->

        <classSpec ident="att.rest.log" module="MEI.shared" type="atts" mode="change">
          <classes mode="replace">
            <memberOf key="att.augmentdots"/>
            <memberOf key="att.event"/>
            <memberOf key="att.duration.musical.req"/>
            <memberOf key="att.fermatapresent"/>
            <memberOf key="att.tupletpresent"/>
            <memberOf key="att.rest.log.cmn"/>
          </classes>
        </classSpec>

        
        <classSpec ident="model.meilibjs.eventLike" mode="add" module="MEI.cmn" type="model">
          <desc>groups event elements what MeiLib.js can accept when converting between timestamps and xml:id values</desc>
        	
        	<!-- ############################################################################################ -->
        	<!-- TODO adjust description or mei2vf: meilib currently can't handle the eventLike mRest element -->
        	<!-- ############################################################################################ -->
        	
        </classSpec>
        
        <classSpec ident="model.meilibjs.simpleEventLike" mode="add" module="MEI.cmn" type="model">
          <desc>groups event elements with atomic duration value</desc>
          <classes>
            <memberOf key="model.meilibjs.eventLike"/>
          </classes>
        </classSpec>
        
        <!-- note must have @dur, unless it's in a chord with @dur -->
        <elementSpec ident="note" module="MEI.shared" mode="change">
          <classes mode="change">
            <memberOf key="model.meilibjs.simpleEventLike"/>
          </classes>
          <!--<constraintSpec ident="note_chordDur" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:note">
                <sch:assert test="not(@dur) and not(parent::mei:chord[@dur])">
                  note must have dur unless defined in parent chord
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>-->
        </elementSpec>
        <elementSpec ident="rest" module="MEI.shared" mode="change">
          <classes mode="change">
            <memberOf key="model.meilibjs.simpleEventLike"/>
          </classes>
        </elementSpec>
      	<elementSpec ident="space" module="MEI.shared" mode="change">
      		<classes mode="change">
      			<memberOf key="model.meilibjs.simpleEventLike"/>
      		</classes>
      	</elementSpec>
        <elementSpec ident="mRest" module="MEI.cmn" mode="change">
          <classes mode="change">
            <memberOf key="model.meilibjs.eventLike"/>
          </classes>
        </elementSpec>

        <elementSpec ident="chord" module="MEI.shared" mode="change">
          <classes mode="change">
            <memberOf key="model.meilibjs.simpleEventLike"/>
          </classes>
          <!-- duration of chord should be well-defined! 
               A) all child notes, as long as they belong to the current layer, must have the 
                  same @dur value.
               B) if @dur is defined, it should be the same value then all 
                  child elements' @dur if any of them are defined.
          -->    
          <constraintSpec ident="meilibjs_chordDur" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[@dur][ancestor::layer[@n]]">
                <sch:let name="this_layer" value="ancestor::layer[1]/@n"/>
                <sch:assert test="*[not(@layer)]/@dur = @dur">
                  duration of chord must be well-defined
                </sch:assert>
                <sch:assert test="*[@layer=current()/ancestor::layer[1]/@n]/@dur = @dur">
                  duration of chord must be well-defined
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="meilibjs_chordDur1" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[@dur][ancestor::layer[not(@n)]]">
                <sch:let name="this_layer" value="1"/>
                <sch:assert test="*[not(@layer)]/@dur = @dur">
                  duration of chord must be well-defined
                </sch:assert>
                <sch:assert test="*[@layer=1]/@dur = @dur">
                  duration of chord must be well-defined
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="meilibjs_chordDur2" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[not(@dur)][ancestor::layer[@n]]">
                <sch:let name="this_layer" value="ancestor::layer[1]/@n"/>
                <sch:let name="this_dur" value="*[@dur and (not(@layer) or @layer=current()/ancestor::layer[1]/@n)][1]/@dur"/>
                <sch:assert test="*[not(@layer)]/@dur = *[@dur and (not(@layer) or @layer=current()/ancestor::layer[1]/@n)][1]/@dur">
                  duration of chord must be well-defined
                </sch:assert>
                <sch:assert test="*[@layer=current()/ancestor::layer[1]/@n]/@dur = *[@dur and (not(@layer) or @layer=current()/ancestor::layer[1]/@n)][1]/@dur">
                  duration of chord must be well-defined
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="meilibjs_chordDur3" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:chord[not(@dur)][ancestor::layer[not(@n)]]">
                <sch:let name="this_layer" value="1"/>
                <sch:let name="this_dur" value="*[@dur and (not(@layer) or @layer=$this_layer)][1]/@dur"/>
                <sch:assert test="*[not(@layer)]/@dur = *[@dur and (not(@layer) or @layer=1)][1]/@dur">
                  duration of chord must be well-defined
                </sch:assert>
                <sch:assert test="*[@layer=$this_layer]/@dur = *[@dur and (not(@layer) or @layer=1)][1]/@dur">
                  duration of chord must be well-defined
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
          
          
        <!-- children of beam can only be note, rest, space, chord, tuplet or beam -->
        <elementSpec ident="beam" module="MEI.cmn" mode="change">
          <classes mode="change">
            <memberOf key="model.meilibjs.eventLike"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <!--<rng:ref name="model.meilibjs.simpleEventLike"/>-->
              	<rng:ref name="model.meilibjs.eventLike"/>
              	
              	<!-- #################################################################################### -->
              	<!-- replaced simpleEventLike with eventLike, so beams can contain tuplets or other beams -->
              	<!-- #################################################################################### -->
              	
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
      	
      	<!-- same content model as beam -->
      	<elementSpec ident="tuplet" module="MEI.cmn" mode="change">
      		<classes mode="change">
      			<memberOf key="model.meilibjs.eventLike"/>
      		</classes>
      		<content>
      			<rng:zeroOrMore>
      				<rng:choice>
      					<rng:ref name="model.meilibjs.eventLike"/>
      					<rng:ref name="model.appLike"/>
      					<rng:ref name="model.editLike"/>
      					<rng:ref name="model.transcriptionLike"/>
      				</rng:choice>
      			</rng:zeroOrMore>
      		</content>
      	</elementSpec>
      	

        <!-- children of layer can only be note, rest, space, mRest, chord, tuplet or beam -->
        <elementSpec ident="layer" module="MEI.shared" mode="change">
          <desc>An independent stream of events on a staff. In order to convert 
            xml:id and timestamp values there and back, MeiLib.js can only accept certain elements under layer.
            <!-- The term 'layer' is used instead of
            'voice' in order to avoid confusion between 'voice' and 'voice leading'. The def attribute
            may be used to create a connection with a layerDef element where logical and visual
            information about the layer is recorded. Alternatively, the n attribute may be used as a
            reference to a layerDef element with the same value in its n attribute. If neither def nor n
            attributes are present, then encoding order of the layers is presumed to match the encoding
            order of the layer definitions.--></desc>
          <!--<content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.milestoneLike.music"/>
                <rng:ref name="model.annotLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.layerPart"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>-->
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="model.appLike"/>
                <rng:ref name="model.meilibjs.eventLike"/>
                <rng:ref name="model.editLike"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        
        <!-- (clef shape isn't important) -->
        <!-- (time signature isn't important) -->
        <!-- sub-measure variants only 
             * only one section AND 
             * children of section cannot be <app>
        -->
        <elementSpec ident="section" module="MEI.shared" mode="change">
          <content>
            <!--<rng:zeroOrMore>
              <rng:ref name="expansion"/>
            </rng:zeroOrMore>-->
            <rng:zeroOrMore>
              <rng:choice>
                <!-- <rng:ref name="model.appLike"/> -->
                <rng:ref name="model.divLike"/>
                <rng:ref name="model.milestoneLike.music"/>
                <rng:ref name="model.annotLike"/>
                <rng:ref name="model.graphicprimitiveLike"/>
                <rng:ref name="model.editLike"/>
                <rng:ref name="model.transcriptionLike"/>
                <rng:ref name="model.sectionPart"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
          <constraintSpec ident="meilibjs_meterChange" scheme="isoschematron" mode="change">
            <constraint>
              <sch:rule context="mei:mdiv">
                <sch:assert test="count(mei:section) &lt;= 1">the score contains no more than one &lt;section&gt; element.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        
        <!-- <staff> must have @n if staves parameter are to be used -->
        <elementSpec ident="staff" module="MEI.shared" mode="change">
          <attList>
            <attDef ident="n" usage="req" mode="replace">
              <desc>provides a name or number designation for an element. While the value need not be
                unique, it is required to be a single token. It is applicable, therefore mandatory, 
                when the the 'staves' parameter is provided for the meilib.js slicing functions.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </elementSpec>

       <!-- ===============================================================================   
            === CONSTRAINTS SPECIFIC TO MEI2VF ============================================
            (SOME ARE MERGED WITH CONSTRAINTS INHERITED FROM MEILIB.JS TIMESTAMP CONVERSION METHODS)    
       -->
             
        <!-- staffDef constraints:
              - mandatory attributes: @n, @meter.count, @meter.unit, @clef.shape, @clef.line
              - @clef.dis value only '8'
              - @clef.dis.place value only 'below'
        -->
        <classSpec ident="att.mei2vf.common.req" module="MEI.shared" type="atts" mode="add">
          <desc>Attributes required by MEItoVexFlow.</desc>
          <attList>
            <attDef ident="n" usage="req">
              <desc>provides a name or number designation for an element. While the value need not be
                unique, it is required to be a single token.</desc>
              <datatype>
                <rng:data type="NMTOKEN"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <classSpec ident="att.mei2vf.common.opt" module="MEI.shared" type="atts" mode="add">
          <desc>Optional common attributes in MEItoVexFlow</desc>
          <classes>
            <memberOf key="att.id"/>
          </classes>
          <attList>
            <attDef ident="label" usage="opt">
              <desc>provides a label for an element. The value may be any string.</desc>
            </attDef>
            <attDef ident="xml:base" usage="opt">
              <desc>provides a base URI reference with which applications can resolve relative URI
                references into absolute URI references.</desc>
              <datatype>
                <rng:ref name="data.URI"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        <!-- meter change only between measures! 
          ==> 1. sub-layer meter changes: forbidden by the constraint 'children of layer can only 
                 be note, rest, space, mRest, chord or beam'
              2. super-layer meter changes (<layer n="1"/><staffDef/><layer n="1">): 
                 ASSERT: if staffDef contains meter.count or meter.unit, then they should be the same than the closest 
                         staffDef (with same @n) backwards in the tree.
          TODO: test this rule!
        -->
        <elementSpec ident="staffDef" module="MEI.shared" mode="change">
          <desc>(staff definition) – Container for staff meta-information. Only certain combinations of 
            attributes @clef.shape and @clef.line are allowed by MEItoVexFlow. Change of time 
            signature isn't allowed within measures.</desc>
          <classes mode="replace">
            <memberOf key="att.mei2vf.common.req"/>
            <memberOf key="att.mei2vf.common.opt"/>
            <memberOf key="att.declaring"/>
            <memberOf key="att.staffDef.log"/>
            <memberOf key="att.staffDef.vis"/>
            <memberOf key="att.staffDef.ges"/>
            <memberOf key="att.staffDef.anl"/>
            <memberOf key="model.staffDefLike"/>
          </classes>
          
          <!-- only certain combinations of attributes @clef.shape and @clef.line are allowed -->
          <constraintSpec ident="Limit_ClefG" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:staffDef">
                <sch:assert test="if (@clef.shape='G') then (@clef.line='2') else (true())">
                  @clef.line must be set to '2' when @clef.shape is 'G'.
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="Limit_ClefF" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:staffDef">
                <sch:assert test="if (@clef.shape='F') then (@clef.line='4') else (true())">
                  @clef.line must be set to '4' when @clef.shape is 'F'.
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="Limit_ClefC" scheme="isoschematron">
            <constraint>
              <sch:rule context="mei:staffDef">
                <sch:assert test="if (@clef.shape='C') then (@clef.line='3' or @clef.line='2' or @clef.line='4') else (true())">
                  @clef.line must be set to '2', '3' or '4' when @clef.shape is 'C'.
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          
          <!-- meter change only between measures! 
            ==> 1. sub-layer meter changes: forbidden by the constraint 'children of layer can only 
                   be note, rest, space, mRest, chord or beam'
                2. super-layer meter changes (<layer n="1"/><staffDef/><layer n="1">): 
                   ASSERT: if staffDef contains meter.count or meter.unit, then they should be the same than the closest 
                           staffDef (with same @n) backwards in the tree.
            TODO: test this rule!
          -->
          <constraintSpec ident="meilibjs_meterChange" scheme="isoschematron" mode="change">
            <constraint>
              <sch:rule context="mei:staffDef[@meter.count][ancestor::mei:measure]">
                <sch:let name="this_n" value="@n"/>
                <sch:let name="this_meter_count" value="@meter.count"/>
                <sch:let name="prev_meter_count" value="preceding::mei:scoreDef[@n=$this_n and @meter.count][1]/@meter.count"/>
                <sch:assert test="$this_meter_count = $prev_meter_count">cannot change time signature within a measure.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="meilibjs_meterChange2" scheme="isoschematron" mode="change">
            <constraint>
              <sch:rule context="mei:staffDef[@meter.unit][ancestor::mei:measure]"> 
                <sch:let name="this_n" value="@n"/>
                <sch:let name="this_meter_unit" value="@meter.unit"/>
                <sch:let name="prev_meter_unit" value="preceding::mei:scoreDef[@n=$this_n and @meter.unit][1]/@meter.unit"/>
                <sch:assert test="$this_meter_unit = $prev_meter_unit">cannot change time signature within a measure.</sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
        
        <macroSpec ident="data.OCTAVE.DIS" module="MEI" type="dt" mode="change">
          <desc>The amount of octave displacement; MEI2VexFlow allows one octave siaplacement, 
            that is, '8' (as in '8va' for 1 octave). (MEI-cmn also allows 
            '15' for 2 octaves, and '22' for 3 octaves.)</desc>
          <content>
            <rng:data type="positiveInteger">
              <rng:param name="pattern">8</rng:param>
            </rng:data>
          </content>
        </macroSpec>
        
        <macroSpec ident="data.DIS.PLACE" module="MEI" type="dt" mode="change">
          <content>
            <rng:choice>
              <rng:value>below</rng:value>
            </rng:choice>
          </content>
        </macroSpec>
        
        <classSpec ident="att.mei2vf.cleffing.log" module="MEI.shared" type="atts" mode="add">
          <attList>
            <attDef ident="clef.shape" usage="req">
              <desc>encodes a value for the clef symbol.</desc>
              <datatype>
                <rng:ref name="data.CLEFSHAPE"/>
              </datatype>
            </attDef>
            <attDef ident="clef.line" usage="req">
              <desc>contains a default value for the position of the clef. The value must be in the
                range between 1 and the number of lines on the staff. The numbering of lines starts with
                the lowest line of the staff.</desc>
              <datatype>
                <rng:ref name="data.CLEFLINE"/>
              </datatype>
            </attDef>
            <attDef ident="clef.dis" usage="opt">
              <desc>records the amount of octave displacement to be applied to the clef.</desc>
              <datatype>
                <rng:ref name="data.OCTAVE.DIS"/>
              </datatype>
            </attDef>
            <attDef ident="clef.dis.place" usage="opt" mode="replace">
              <datatype>
                <rng:ref name="data.DIS.PLACE"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        
        <classSpec ident="att.mei2vf.meterSigDefault.log" module="MEI.shared" type="atts" mode="add">
          <desc>Used by staffDef and scoreDef to provide default values for attributes in the logical
            domain related to meter signature.</desc>
          <attList>
            <attDef ident="meter.count" usage="req">
              <desc>captures the number of beats in a measure, that is, the top number of the meter
                signature. It must contain a decimal number or an additive expression that evaluates to
                a decimal number, such as 2+3.</desc>
              <datatype>
                <rng:data type="string">
                  <rng:param name="pattern">\d+(\.\d+)?(\s*\+\s*\d+(\.\d+)?)*</rng:param>
                </rng:data>
              </datatype>
            </attDef>
            <attDef ident="meter.unit" usage="req">
              <desc>contains the number indicating the beat unit, that is, the bottom number of the
                meter signature.</desc>
              <datatype>
                <rng:data type="decimal"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        
        <classSpec ident="att.staffDef.log" module="MEI.shared" type="atts" mode="change">
          <classes>
            <memberOf key="att.mei2vf.cleffing.log"/>
            <memberOf key="att.duration.default"/>
            <memberOf key="att.keySigDefault.log"/>
            <memberOf key="att.mei2vf.meterSigDefault.log"/>
            <memberOf key="att.octavedefault"/>
            <memberOf key="att.transposition"/>
            <memberOf key="att.staffDef.log.cmn"/>
            <memberOf key="att.staffDef.log.mensural"/>
          </classes>
        </classSpec>
        
        <!-- TODO: @dur @pname and @oct must be defined on note elements 
                   A) @dur must be defined for note elements:
                      TODO: INCLUDE CONSTR '@dur of note, rest, space must be defined!' in mei-meilibjs-timestamp.ODD
                   B) @pname and @oct must be defined on note elements
        -->
        
        <!-- B) @pname and @oct are always required -->
        <classSpec ident="att.pitch" module="MEI.shared" type="atts" mode="change">
          <attList>
            <attDef ident="pname" usage="req" mode="change"/>
          </attList>
        </classSpec>
        <classSpec ident="att.octave" module="MEI.shared" type="atts" mode="change">
          <attList>
            <attDef ident="oct" usage="req" mode="change"/>
          </attList>
        </classSpec>
        
        <!-- @dur must be defined on rest elements 
          TODO: INCLUDE CONSTR '@dur of note, rest, space must be defined!' in mei-meilibjs-timestamp.ODD
        -->
                
        <!-- children of section can only be:
              - measure
              - scoreDef
              - staffDef
              - sb
             This constraint is implemented by removing elements that aren't supported anyway:
        --> 
        <!--<elementSpec ident="ending" module="MEI.shared" mode="delete"/>
        <elementSpec ident="annot" module="MEI.shared" mode="delete"/>
        <elementSpec ident="ending" module="MEI.shared" mode="delete"/>
        <elementSpec ident="expansion" module="MEI.shared" mode="delete"/>
        <elementSpec ident="pb" module="MEI.shared" mode="delete"/>-->


        
        <!-- Clef constraints
             - shape is only G, F or C
             - only certain combinations of attributes @clef.shape 
               and @clef.line are allowed (see at staffDef elementSpec constraints!)
        -->
        <macroSpec ident="data.CLEFSHAPE" module="MEI" type="dt" mode="change">
          <desc>Clef shape attribute values (Read, p.53-56). Some values correspond to the Unicode
            Standard. MEI2VF can only render G, F and C clef glyphs.</desc>
          <content>
            <rng:choice>
              <rng:value>G</rng:value>
              <a:documentation>G clef (Unicode 1D11E)</a:documentation>
              <rng:value>F</rng:value>
              <a:documentation>F clef (Unicode 1D122)</a:documentation>
              <rng:value>C</rng:value>
              <a:documentation>C clef (Unicode 1D121)</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>
                

      </schemaSpec>
    </body>
  </text>
</TEI>
